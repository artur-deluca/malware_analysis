import json
import numpy as np
import matplotlib.pyplot as plt

from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels


def plot_confusion_matrix(y_true, y_pred, classes, title='Confusion matrix', cmap=plt.cm.Blues, plot=False):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    # taken from: https://bit.ly/2O4y2Cu
    # Compute confusion matrix
    cm = confusion_matrix(y_true, y_pred)
    cm_norm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
    # Only use the labels that appear in the data
    #classes = classes[unique_labels(y_true, y_pred)]

    fig, ax = plt.subplots()
    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax)
    # We want to show all ticks...
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           # ... and label them with the respective list entries
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, "{}\n{:.2f}".format(cm[i, j], cm_norm[i, j]),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")
    plt.savefig('{}.svg'.format(title))
    plt.show()

def save_cross_validation(results, path):
    """Save results from cross validation of different models in a .json file
    
    Args:
        results: dict
            dictionary containing the results from cvs
        path: str
            path to save file (including its name)
    """
    for name, value in results.items():
        for field, measurements in value.items():
            if type(measurements) == np.ndarray:
                results[name][field] = measurements.tolist()
    with open(path, 'a') as f:
        f.write(json.dumps(results))

def save_grid_search(results, path):
    """Save results from grid-search-cross validation in a .json file
    
    Args:
        results: dict
            dictionary containing the results from cv
        path: str
            path to save file (including its name)
    """
    for field in results.keys():
        try:
            results[field] = results[field].tolist()
        except AttributeError:
            pass
    with open(path, 'a') as f:
        f.write(json.dumps(results))