import logging
import matplotlib.pyplot as plt

import pandas as pd
import support

from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_validate
from sklearn.metrics import make_scorer, accuracy_score, matthews_corrcoef

from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import MultinomialNB

SEED = 42
CV_SPLITS = 10
target = "opt"
title = "Confusion Matrix: {}"

results = dict()
scoring = {'MCC': make_scorer(matthews_corrcoef), 'Accuracy': make_scorer(accuracy_score)}



dataset = (pd.read_json("./train_dataset.json", lines=True)
           .sample(frac=1, random_state=SEED).
           reset_index(drop=True)
)

X_train, X_test, y_train, y_test = train_test_split(dataset.instructions, dataset[target], random_state=SEED)


if __name__ == "__main__":

    logging.basicConfig()
    logging.getLogger().setLevel(logging.INFO)

    strategies = {
        "Naive-Bayes": make_pipeline(
        support.nGramsExtractor(ngrams=(4,4), words=2),
        MultinomialNB()
        ),

        "Decision tree": make_pipeline(
            support.nGramsExtractor(ngrams=(4,4), words=2),
            DecisionTreeClassifier(random_state=SEED)
        ),

        "Linear SVM": make_pipeline(
            support.nGramsExtractor(ngrams=(4,4), words=2),
            LinearSVC(random_state=SEED)
        )

    }

    for name, model in strategies.items():

        logging.info("Strategy: {}".format(name))
        results[name] = cross_validate(model, dataset.instructions, dataset[target], cv=CV_SPLITS, scoring=scoring)

        model.fit(X_train, y_train)
        logging.info("Accuracy: {:.3f}".format(results[name]["test_Accuracy"].mean()))
        support.plot_confusion_matrix(y_test, model.predict(X_test), classes=dataset[target].unique(), title=title.format(name))

    support.save_cross_validation(results, 'results/{}_model_selection.json'.format(target))